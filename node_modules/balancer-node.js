var request = require('request');
var startTime = new Date();

var limitTimeout = 90000;

require('price-btc-usd')(init);
require('price-usd-brl')(init);

var btcUSD, usdBRL;

var possibleFundsPhrase = ["funds.*?:.*?\\d+", "balance:.*?\\d+"];
var possibleRewardsPhrase = ["every.*?\\d+.*?(minute|hour)s?"];
var possibleReferralPhrase = ["referral.*?(http://)"];

var requestsWaiting = 0;

var goodNozzleList = [];
var badNozzleList = [];

var totalFunds = 0,
    countTotal = 0,
    activeProcesses = 0
;

function parseNozzle(url, body) {
    var foundSomething = [], thisMatch, finalBalance;
    for (var i = 0; i < possibleFundsPhrase.length; i++) {
        if (body) {
            thisMatch = body.match(new RegExp(possibleFundsPhrase[i], 'i'));
        } else {
            console.log("\n\n--->>> ERROR: NO BODY FOUND", url);
            break;
        }
        
        if (thisMatch) {
console.log("\n\n)))))))  FOUND: ", url, thisMatch && ">>> " + thisMatch[0] + " <<<");
            var nozzleBalance = parseFunds(url, thisMatch);
            var fundsBTC = (nozzleBalance / 1e8);
            var fundsUSD = ((nozzleBalance / 1e8) * btcUSD).toFixed(2);
            var fundsBRL = (((nozzleBalance / 1e8) * btcUSD) * usdBRL).toFixed(2);

            finalBalance = {
                link: url,
                timestamp: (new Date()).toString(),
                btcUSD: btcUSD,
                usdBRL: usdBRL,
                satoshi: nozzleBalance,
                fundsBTC: fundsBTC,
                fundsUSD: fundsUSD,
                fundsBRL: fundsBRL
            };
            
            break;
        } else {
//             console.log("--->>> ERROR: NO MATCH FOUND", url);
        }
    }

    countTotal++;

    activeProcesses--;
    
    if ( ! finalBalance) {
        badNozzleList.push({url:url,value:0});
    }
    
    return finalBalance;
}

function balanceTotal() {
    var fundsBTC = (totalFunds / 1e8);
    var fundsUSD = ((totalFunds / 1e8) * btcUSD).toFixed(2);
    var fundsBRL = (((totalFunds / 1e8) * btcUSD) * usdBRL).toFixed(2);
    
    var goods = goodNozzleList.length;
    var bads = badNozzleList.length;
    var visibleBalanceRatio = parseInt((goods * 100) / (goods + bads), 10) + " %";

    var finalBalance = {
        timestamp: (new Date()).toString(),
        runtime: (+new Date) - startTime,
        nozzleCount: countTotal,
        visibleBalanceRatio: visibleBalanceRatio,
        btcUSD: btcUSD,
        usdBRL: usdBRL,
        satoshi: totalFunds,
        fundsBTC: fundsBTC,
        fundsUSD: parseFloat(fundsUSD, 10),
        fundsBRL: parseFloat(fundsBRL, 10)
    };
    
    return finalBalance;
}

function rankByBalance(list) {
    var ranked = list.slice(0);
    
    ranked.sort(function (a, b) {
        return b.value - a.value;
    });
    
    return ranked;
}

function saveList(name, list) {
    var data;
    
    try {
        data = JSON.stringify(list, null, '\t');
        require('fs').writeFileSync(name, data, 'utf8');
    } catch(e) {
        throw new Error("Could not stringify or save list: " + name);
    }
}

function getTarget(url, withProxy, callback) {
    var childTimeout,
        target = {
            url: url,
            encoding: 'binary'
        };

    if (withProxy) {
        target.proxy = withProxy;
    }
    
    var req = request(target, function(err, resp, body) {
        clearTimeout(childTimeout);
        
        var parsedTarget = parseNozzle(url, body);
        
        callback(parsedTarget);
    });
    
    activeProcesses++;
    
    // if this is not done in 1 minute, fuck off!
    childTimeout = setTimeout(function () {
        console.log("\n\n" + activeProcesses + ":::TIMEOUT: ", url);
        badNozzleList.push({url:url,value:0});
        activeProcesses--;
        req.abort();
        verifyEnd();
    }, limitTimeout);
}

function parseFunds(url, match) {
    var value;
    
    if (match && match.length && match[0]) {
       value = parseInt((''+match[0]).replace(/[^0-9\-]/ig, ''), 10);
    }
    
    if (value && value > 0) {
        goodNozzleList.push({url:url,value:value});
        totalFunds += value;
    }
    
    return value;
}

function obfuscateWallet(link) {
//     return link.replace('weFVogcxq6K21zWXf1NnFcBCTTcmEYH4LC', Math.random().toString(35).substr(2, 34));
    return link.replace('weFVogcxq6K21zWXf1NnFcBCTTcmEYH4LC', '1KLruuKccfWcGwZUVHJsMrYkphfyCKZR17'); // blockchain wallet
}

function verifyEnd() {
    if (activeProcesses == 0) { // if end of process
        console.log("\n\n---\n > TOTAL", balanceTotal(), "\n---\n\n");
        
        var rankedGood = rankByBalance(goodNozzleList);

        saveList("node_modules/nozzle-rank.json", rankedGood);
    }
}

var nozzleList = require('nozzle-filtered-CLEAN').results;//.slice(0, 100);

/////
// special case match: >>> balance-scale"></i> Faucet balance: <input type="text" class="form-balance" value="470572 <<<
// special case match: >>> balance.png" width="160" height="100"> &nbsp; Balance: 4382240 <<<
// nozzleList = [
// { link: 'http://bitcoinsblue.com?r=1lr42yew7rhusnaj9byvf54s6ehn1x2p4o'},
// { link: 'http://freesatoshi.com.ua/?r=akvtevexmoe5qrsp3px7u5160oru4kgs1k'}
// ];
/////

function init(currentPrice) {
    
    if (currentPrice.btcUSD) {
        btcUSD = currentPrice.btcUSD;
    }
    
    if (currentPrice.usdBRL) {
        usdBRL = currentPrice.usdBRL;
    }
    
    if (btcUSD && usdBRL) {
        console.log("nozzleList", nozzleList.length);
        var link;
        for (var i = 0; i < nozzleList.length; i++) {
            link = obfuscateWallet(nozzleList[i].link);
            getTarget(link, false, function (balance) {
                var goods = goodNozzleList.length;
                var bads = badNozzleList.length;
                var goodsRatio = parseInt((goods * 100) / (goods + bads), 10);
                var badsRatio = 100 - goodsRatio;

                console.log("\n" + activeProcesses + ":::>>> BALANCE [ good: " + goods + " (" + goodsRatio + "%), bad: " + bads + " (" + badsRatio + "%) ]: ", balance);

                verifyEnd();
            });
        }
    }
}